# -*- coding: utf-8 -*-
"""facestressimagethrough.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dY0IG2IRJA5TssGTUfg3n4mXgoPFGPd8
"""

!ls

!ls '/content/drive'

from google.colab import drive
drive.mount('/content/drive')

import os  
os.chdir('/content/drive/My Drive/ColabNotebooks/Face_stress_detector/Facestressdetector/Fer2013')

!pwd

#import libraries
import tensorflow as tf
import matplotlib.pyplot as plt

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import InputLayer, Conv2D, MaxPooling2D, Flatten, Dense

model=Sequential()
model.add(InputLayer(input_shape=(28,21,3)))
model.add(Conv2D(filters=10,kernel_size=3,strides=(1,1),padding='valid',activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Conv2D(filters=10,kernel_size=3,strides=(1,1),padding='valid',activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Conv2D(filters=10,kernel_size=3,strides=(1,1),padding='valid',activation='relu'))
model.add(MaxPooling2D(pool_size=(1,1)))
model.add(Flatten())
model.add(Dense(64,activation='relu'))
model.add(Dense(32,activation='relu'))
model.add(Dense(5,activation='sigmoid'))

import tensorflow
model.compile(optimizer='adam',loss=tensorflow.keras.losses.categorical_crossentropy,metrics=['acc'])

from tensorflow.keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(
    rescale=1./255,
    horizontal_flip=True
)
test_datagen = ImageDataGenerator(
    rescale=1./255
)
train_generator = train_datagen.flow_from_directory(
    './train',
    target_size=(28,21),
    batch_size=32,
    class_mode= 'categorical'
)
validation_generator = test_datagen.flow_from_directory(
    './validation',
    target_size=(28,21),
    batch_size=32,
    class_mode='categorical'
)
model.fit(train_generator,steps_per_epoch=20,epochs=2,validation_data=validation_generator,validation_steps=8)

import imutils
import numpy as np
import cv2
from google.colab.patches import cv2_imshow
from IPython.display import display, Javascript
from google.colab.output import eval_js
from base64 import b64decode

def take_photo(filename='photo.jpg', quality=0.8):
  js = Javascript('''
    async function takePhoto(quality) {
      const div = document.createElement('div');
      const capture = document.createElement('button');
      capture.textContent = 'Capture';
      div.appendChild(capture);

      const video = document.createElement('video');
      video.style.display = 'block';
      const stream = await navigator.mediaDevices.getUserMedia({video: true});

      document.body.appendChild(div);
      div.appendChild(video);
      video.srcObject = stream;
      await video.play();

      // Resize the output to fit the video element.
      google.colab.output.setIframeHeight(document.documentElement.scrollHeight, true);

      // Wait for Capture to be clicked.
      await new Promise((resolve) => capture.onclick = resolve);

      const canvas = document.createElement('canvas');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      canvas.getContext('2d').drawImage(video, 0, 0);
      stream.getVideoTracks()[0].stop();
      div.remove();
      return canvas.toDataURL('image/jpeg', quality);
    }
    ''')
  display(js)
  data = eval_js('takePhoto({})'.format(quality))
  binary = b64decode(data.split(',')[1])
  with open(filename, 'wb') as f:
    f.write(binary)
  return filename

image_file = take_photo()

#image = cv2.imread(image_file, cv2.IMREAD_UNCHANGED)
image = cv2.imread(image_file)

# resize it 
image = imutils.resize(image, width=28,height=21)
(h, w) = image.shape[:2]
print(w,h)
cv2_imshow(image)

import cv2
image = image.reshape((1,28,21,3))
image = predicted_value=model.predict(image)

predicted_value

map = {"0":"Mild_stress","1":"No_stress","2":"Low_stress","3":"High_Stress","4":"Average_stress"}

key=np.argmax(predicted_value)
key=str(key)
print(map.get(key))

heartbeat= int(input('Enter your heartbeat: '))
age= int(input('Enter your age: '))
bp= int(input('Enter your bp: '))
if bp > 80 and bp < 120:
  if heartbeat > 60 and heartbeat < 120:
    if age < 50:
      print("Person is in Normal Condition ")
    else:
      print(" Person having high Stress")
  else:
      print("Stress having mild stress")
else:
      print(" Person having low Stress")

